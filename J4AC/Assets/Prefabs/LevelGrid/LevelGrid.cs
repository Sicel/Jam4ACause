using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LevelGrid : MonoBehaviour
{
    public static LevelGrid CurrLevelGrid { get; private set; }

    [Tooltip("An object to represent a grid tile.")]
    public GameObject gridTile;

    [Tooltip("The matrix dimensions of the grid")]
    public Vector2Int gridDimensions;

    [Tooltip("The length of a single grid unit, i.e. 1.0f = 1 grid unit. Use this when relative positioning.")]
    public float SizePerUnit = 1.0f;

    [Tooltip("List of grid objects not generated by this, ie player, goal, door.")]
    public List<GameObject> gridElements;

    [Header("Auto Generate a background grid")]
    public bool GenerateGrid = false;

    [Tooltip("List of grids generated")]
    public List<GameObject> gridBase;

    /// <summary>
    /// 
    /// </summary>
    private void Awake()
    {
        CurrLevelGrid = this;
    }


    /// <summary>
    /// Start is called before the first frame update
    /// </summary>
    void Start()
    {

    }


    /// <summary>
    /// 
    /// </summary>
    void Update()
    {

    }


    /// <summary>
    /// 
    /// </summary>
    void OnValidate()
    {
        CurrLevelGrid = this;
        if (GenerateGrid)
        {
            // Make a new list if null
            if (gridBase == null)
                gridBase = new List<GameObject>(gridDimensions.x * gridDimensions.y);

            // Fill list if base tile isn't null
            if (gridTile != null)
            {
                int gridsUnitsGenerated = 0;

                for (int i = 0; i < gridDimensions.x; i++)
                {
                    for (int j = 0; j < gridDimensions.y; j++)
                    {
                        Tile tile;
                        if (gridsUnitsGenerated < gridBase.Count && gridBase[gridsUnitsGenerated] != null)
                        {
                            // Repurpose existing grid unit.
                            gridBase[gridsUnitsGenerated].SetActive(true);
                            tile = gridBase[gridsUnitsGenerated].GetComponent<Tile>();
                        }
                        else
                        {
                            // Generate a grid element and position it
                            GameObject newGridTile = Instantiate(gridTile, this.transform);
                            gridBase.Add(newGridTile);
                            tile = newGridTile.GetComponent<Tile>();
                        }

                        // Position that tile
                        tile.SnapToTile(new Vector2Int(i, j));

                        gridsUnitsGenerated += 1;
                    }
                }

                // If we're decreasing the number of grid units, set any pre-existing to false.
                for (int i = gridsUnitsGenerated; i < gridBase.Count; i++)
                {
                    if (gridBase[i] != null)
                        gridBase[i].SetActive(false);
                }
            }

            GenerateGrid = false;
        }
    }


    #region PUBLIC FUNCTIONS

    public void ResetLevel()
    {

    }

    #endregion
}
